{"version":3,"file":"static/js/371.8f06b89d.chunk.js","mappings":"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","sources":["Components/Canvas/RBT/RbCanvas.jsx","Components/Canvas/RBT/compControls.jsx","Components/Canvas/RBT/compInput.jsx","Components/Canvas/RbTree.jsx","webpack://frontend/./src/Components/Canvas/RBT/RbCanvas.scss?f690","webpack://frontend/./src/Components/Canvas/RBT/compControls.scss?c64e","webpack://frontend/./src/Components/Canvas/RBT/compInput.scss?3ffe"],"sourcesContent":["import React, { Component } from \"react\";\n\nimport TreeCore, { Node, TreeLogger } from \"./Tree\";\nimport Jobs from \"./Jobs\";\n\nimport Tree from \"./compTree\";\nimport Input from \"./compInput\";\nimport Controls from \"./compControls\";\n\nimport playButton from \"./play.png\";\nimport ffButton from \"./ff.png\";\n\nimport \"./RbCanvas.scss\";\n\nexport default class RbCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.handleInsert = this.handleInsert.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleLookup = this.handleLookup.bind(this);\n    this.parseTasks = this.parseTasks.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.handlePrev = this.handlePrev.bind(this);\n    var tree = new TreeCore();\n    var snapshot = tree.snapshot();\n    this.state = {\n      tree: tree,\n      tasks: [],\n      taskStrings: [],\n      taskId: 0,\n      jobId: null,\n      snapshot: snapshot,\n      snapshots: [snapshot],\n      nodeMap: {},\n    };\n  }\n\n  parseTasks(tasks) {\n    var taskArray = [];\n    var taskStrings = [];\n\n    tasks.map((task) => {\n      var [type, nodeId, parentId, direction, extra] = task.split(\":\");\n\n      var taskObject = {\n        type: type,\n        nodeId: nodeId,\n        parentId: parentId,\n        direction: direction,\n        extra: extra,\n      };\n\n      var taskString = this.buildTaskString(taskObject);\n\n      taskArray.push(taskObject);\n      taskStrings.push(taskString);\n    });\n\n    this.setState({\n      tasks: taskArray,\n      taskStrings: taskStrings,\n    });\n  }\n\n  buildTaskString(task) {\n    var taskString = \"\";\n    switch (task.type) {\n      case TreeLogger.LOOK:\n        //taskString = \"Look at node \" + task.nodeId;\n        break;\n      case TreeLogger.FOUND:\n        //taskString = task.extra + \" found at node \" + task.nodeId;\n        break;\n      case TreeLogger.NOT_FOUND:\n        //taskString = \"Could not find \" + task.extra;\n        break;\n      case TreeLogger.COMPARE:\n        //taskString = \"Compare with node \" + task.nodeId;\n        break;\n      case TreeLogger.ROTATE:\n        //taskString = \"Rotate node \" + task.nodeId + \" \" + task.direction;\n        break;\n      case TreeLogger.ERROR:\n        //taskString = \"Found error at node \" + task.nodeId;\n        break;\n      case TreeLogger.RECOLOR:\n        //taskString = \"Recolor node \" + task.nodeId;\n        break;\n      case TreeLogger.INSERT:\n        //taskString = \"Insert \" + task.extra;\n        break;\n      case TreeLogger.DELETE:\n        //taskString = \"Delete \" + task.extra;\n        break;\n      default:\n        break;\n    }\n    return taskString;\n  }\n\n  handleInsert(data) {\n    var originalSnapshot = this.state.snapshot;\n\n    if (originalSnapshot == null) {\n      originalSnapshot = this.state.tree.snapshot();\n    }\n\n    var jobId = data.toString() + \":\" + \"insert\";\n\n    this.state.tree.insert(jobId, data);\n\n    var tasks = this.state.tree.logger.getLogs(jobId);\n    this.parseTasks(tasks);\n\n    var snapshots = [];\n    var snapshot = originalSnapshot;\n    tasks.map((task) => {\n      snapshot = snapshot.getSnapshotFromDiff(task);\n      snapshots.push(snapshot);\n    });\n\n    this.setState({\n      //nodeMap: this.state.tree.compile(),\n      jobId: jobId,\n      taskId: 0,\n      snapshot: snapshot,\n      snapshots: snapshots,\n    });\n  }\n\n  handleDelete(data) {\n    var originalSnapshot = this.state.snapshot;\n\n    if (originalSnapshot == null) {\n      originalSnapshot = this.state.tree.snapshot();\n    }\n\n    var jobId = data.toString() + \":\" + \"insert\";\n\n    this.state.tree.delete(jobId, data);\n\n    var tasks = this.state.tree.logger.getLogs(jobId);\n    this.parseTasks(tasks);\n\n    var snapshots = [];\n    var snapshot = originalSnapshot;\n    tasks.map((task) => {\n      snapshot = snapshot.getSnapshotFromDiff(task);\n      snapshots.push(snapshot);\n    });\n\n    this.setState({\n      //nodeMap: this.state.tree.compile(),\n      jobId: jobId,\n      taskId: 0,\n      snapshot: snapshot,\n      snapshots: snapshots,\n    });\n  }\n\n  handleLookup(data) {\n    var originalSnapshot = this.state.snapshot;\n\n    if (originalSnapshot == null) {\n      originalSnapshot = this.state.tree.snapshot();\n    }\n\n    var jobId = data.toString() + \":\" + \"lookup\";\n\n    var id = this.state.tree.lookup(jobId, data);\n\n    var tasks = this.state.tree.logger.getLogs(jobId);\n    this.parseTasks(tasks);\n\n    var snapshots = [];\n    var snapshot = originalSnapshot;\n    tasks.map((task) => {\n      snapshot = snapshot.getSnapshotFromDiff(task);\n      snapshots.push(snapshot);\n    });\n\n    this.setState({\n      //nodeMap: this.state.tree.compile(),\n      jobId: jobId,\n      taskId: 0,\n      snapshot: snapshot,\n      snapshots: snapshots,\n    });\n  }\n\n  handleNext() {\n    var taskId = this.state.taskId;\n    var tasks = this.state.tasks;\n    if (taskId < tasks.length - 1) {\n      taskId += 1;\n    }\n    this.setState({ taskId: taskId });\n  }\n\n  handlePrev() {\n    var taskId = this.state.taskId;\n    var tasks = this.state.tasks;\n    if (taskId > 0) {\n      taskId -= 1;\n    }\n    this.setState({ taskId: taskId });\n  }\n\n  getActiveNodes(tasks, taskId) {\n    if (taskId >= tasks.length) {\n      return [];\n    }\n    var task = tasks[taskId];\n    var lookArray = [];\n    var compareArray = [];\n    var errorArray = [];\n    if (task.type === TreeLogger.LOOK) {\n      lookArray.push(task.nodeId);\n    } else if (task.type === TreeLogger.COMPARE) {\n      compareArray.push(task.nodeId);\n    } else if (task.type === TreeLogger.ERROR) {\n      errorArray.push(task.nodeId);\n    }\n\n    return [lookArray, compareArray, errorArray];\n  }\n\n  render() {\n    var activeNodes = this.getActiveNodes(this.state.tasks, this.state.taskId);\n    return (\n      <div className=\"RbCanvas h-100\">\n        <Tree\n          snapshots={this.state.snapshots}\n          taskId={this.state.taskId}\n          tree={this.state.tree}\n          activeNodes={activeNodes}\n        />\n        <div className=\"inputGroup\">\n          <Input placeHolder={\"Insert\"} onInput={this.handleInsert} />\n          <Input placeHolder={\"Delete\"} onInput={this.handleDelete} />\n          <Input placeHolder={\"Lookup\"} onInput={this.handleLookup} />\n        </div>\n\n        <Controls\n          data={this.state.taskStrings}\n          active={this.state.taskId}\n          onNext={this.handleNext}\n          onPrev={this.handlePrev}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Slider from 'react-slick';\n\nimport left from './left.png';\nimport right from './right.png';\n\nimport './compControls.scss';\n\nfunction NextArrow(props) {\n    return (\n        <img src={right}\n            style={{ ...props.style, display: \"block\" }}\n            onClick={() => {\n                if (props.onClick != null) {\n                    props.onClick();\n                }\n                props.onNext();\n            }}\n        />\n    );\n}\n\nfunction PrevArrow(props) {\n    return (\n        <img src={left}\n            style={{ ...props.style, display: \"block\" }}\n            onClick={() => {\n                if (props.onClick != null) {\n                    props.onClick();\n                }\n                props.onPrev();\n            }}\n        />\n    );\n}\n\nclass compControls extends Component {\n\n    constructor(props) {\n        super(props);\n        this.afterChangeHandler = this.afterChangeHandler.bind(this);\n    }\n\n    componentDidUpdate() {\n        this.carousel.slickGoTo(this.props.active, true);\n    }\n\n    afterChangeHandler(currentSlide) {\n        this.carousel.slickGoTo(this.props.active, true);\n    }\n\n    render() {\n        var items = [];\n\n        var settings = {\n            dots: false,\n            infinite: false,\n            speed: 500,\n            vertical: true,\n            className: 'controls',\n            arrows: true,\n            nextArrow: <NextArrow onNext={this.props.onNext} />,\n            prevArrow: <PrevArrow onPrev={this.props.onPrev} />,\n            afterChange: this.afterChangeHandler,\n        };\n\n        this.props.data.map((item, i) => {\n            items.push(\n                <div\n                    key={'ci' + i.toString()}>\n                    {item}\n                </div>)\n\n        });\n\n        return (\n            <div>\n                {<Slider ref={function (c) { this.carousel = c }.bind(this)}\n                    {...settings}>\n                    {items}\n                </Slider>}\n            </div>\n        )\n    }\n}\n\ncompControls.propTypes = {\n    active: PropTypes.number,\n    data: PropTypes.array,\n    onNext: PropTypes.func,\n    onPrev: PropTypes.func\n};\n\nexport default compControls;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './compInput.scss';\n\nclass compInput extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.state = {\n            text: null\n        }\n    }\n\n    handleChange(event) {\n        this.setState({ text: event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (this.state.text != null) {\n            this.props.onInput(this.state.text);\n        }\n    }\n\n    render() {\n        return (\n            <div className='inputContainer'>\n                <input type=\"number\"\n                    className='inputField'\n                    placeholder={this.props.placeHolder}\n                    onChange={this.handleChange} />\n                <button className='inputButton'\n                    onClick={this.handleSubmit}>\n                    Ok\n                </button>\n            </div>\n\n        )\n    }\n\n}\n\ncompInput.propTypes = {\n    placeHolder: PropTypes.string,\n    onInput: PropTypes.func\n}\n\nexport default compInput;","import React from \"react\";\nimport RbCanvas from \"./RBT/RbCanvas\";\n\nconst RbTree = (props) => {\n  return <RbCanvas />;\n};\n\nexport default RbTree;\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["RbCanvas","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","handleInsert","bind","_assertThisInitialized","handleDelete","handleLookup","parseTasks","handleNext","handlePrev","tree","TreeCore","snapshot","state","tasks","taskStrings","taskId","jobId","snapshots","nodeMap","_createClass","key","value","_this2","taskArray","map","task","_task$split","split","_task$split2","_slicedToArray","taskObject","type","nodeId","parentId","direction","extra","taskString","buildTaskString","push","this","setState","TreeLogger","LOOK","FOUND","NOT_FOUND","COMPARE","ROTATE","ERROR","RECOLOR","INSERT","DELETE","data","originalSnapshot","toString","insert","logger","getLogs","getSnapshotFromDiff","delete","lookup","length","lookArray","compareArray","errorArray","activeNodes","getActiveNodes","_jsxs","className","children","_jsx","Tree","Input","placeHolder","onInput","Controls","active","onNext","onPrev","Component","NextArrow","src","right","style","_objectSpread","display","onClick","PrevArrow","left","compControls","afterChangeHandler","carousel","slickGoTo","currentSlide","items","settings","dots","infinite","speed","vertical","arrows","nextArrow","prevArrow","afterChange","item","i","Slider","ref","c","compInput","handleChange","handleSubmit","text","event","target","preventDefault","placeholder","onChange"],"sourceRoot":""}