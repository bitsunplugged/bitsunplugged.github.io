{"version":3,"file":"static/js/9.ec9fb6cb.chunk.js","mappings":"oMASMA,EAAQ,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAWZ,SAAAA,EAAYK,GAAQ,IAADC,EAES,OAFTC,EAAAA,EAAAA,GAAA,KAAAP,IACjBM,EAAAH,EAAAK,KAAA,KAAMH,IACDI,MAAQT,EAASU,IAAIJ,CAC5B,CALC,OAKAK,EAAAA,EAAAA,GAAAX,EAAA,EAAAY,IAAA,cAAAC,IAED,WACE,MAAO,EACT,GAAC,CAAAD,IAAA,gBAAAC,IAED,WACE,MAAO,EACT,GAAC,CAAAD,IAAA,qBAAAE,MAED,SAAmBC,EAAWC,GAC5B,IAAMC,EAAKC,KAAKC,UACVC,EAAWpB,EAASqB,KAAO,EAC7BC,EAAWJ,KAAKb,MAAMkB,MAAQH,EAC9BI,EAAUN,KAAKb,MAAMoB,MAAQL,EAC7BM,EAAOR,KAAKb,MAAMsB,EAAIP,EACtBQ,EAAMV,KAAKb,MAAMwB,EAAIT,EACzBU,EAAAA,GAASC,OAAOd,EAAI,GAAK,CAAEU,EAAGL,EAAUO,EAAGL,GAAW,CAAEG,EAAGD,EAAMG,EAAGD,GACtE,GAAC,CAAAhB,IAAA,oBAAAE,MAED,WACE,IAAMG,EAAKC,KAAKC,UACVC,EAAWpB,EAASqB,KAAO,EAC7BK,EAAOR,KAAKb,MAAMsB,EAAIP,EACtBQ,EAAMV,KAAKb,MAAMwB,EAAIT,EACzBU,EAAAA,GAASC,OACPd,EACA,GACA,CAAEU,EAAGD,EAAMG,EAAGD,EAAKI,MAAO,EAAGC,OAAQ,GACrC,CAAEN,EAAGD,EAAMG,EAAGD,EAAKI,MAAOhC,EAASqB,KAAMY,OAAQjC,EAASqB,MAE9D,GAAC,CAAAT,IAAA,SAAAE,MAED,WAAU,IAADoB,EAAA,KACHC,EAAS,CACXC,SAAU,WAGVJ,MAAOhC,EAASqB,KAChBY,OAAQjC,EAASqB,KACjBgB,gBAAiBnB,KAAKb,MAAMI,MAC5B6B,OAAQ,IAWV,OARIpB,KAAKb,MAAMkC,KACbJ,EAAOK,OAAS,mBACPtB,KAAKb,MAAMoC,QACpBN,EAAOK,OAAS,kBACPtB,KAAKb,MAAMqC,QACpBP,EAAOK,OAAS,qBAIhBG,EAAAA,EAAAA,KAAA,OACEC,UAAU,WACVC,IAAK,SAACC,GAAC,OAAMZ,EAAKf,UAAY2B,CAAC,EAC/BC,MAAOZ,EAAOa,UAEdC,EAAAA,EAAAA,MAAA,OAAKL,UAAU,oBAAmBI,SAAA,EAChCL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUI,SAAE9B,KAAKb,MAAM6C,QACtCD,EAAAA,EAAAA,MAAA,OAAKL,UAAU,YAAWI,SAAA,CAAC,UAAQ9B,KAAKb,MAAM8C,aAItD,IAAC,EAAAvC,IAAA,OAAAC,IA7ED,WACE,OAAO,EACT,GAAC,CAAAD,IAAA,MAAAC,IACD,WACE,MAAO,SACT,GAAC,CAAAD,IAAA,QAAAC,IACD,WACE,MAAO,SACT,KAACb,CAAA,CATW,CAASoD,EAAAA,WA+FvB,W,8BCvGA,WAAiB,C","sources":["Components/Canvas/RBT/compNode.jsx","webpack://frontend/./src/Components/Canvas/RBT/compNode.scss?e90f"],"sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { TweenMax } from \"gsap\";\n\nimport \"./compNode.scss\";\n\nconst SLOT_SIZE = 70;\n\nclass compNode extends Component {\n  static get SIZE() {\n    return 50;\n  }\n  static get RED() {\n    return \"#f45a67\";\n  }\n  static get BLACK() {\n    return \"#332425\";\n  }\n\n  constructor(props) {\n    super(props);\n    this.color = compNode.RED;\n  }\n\n  get idTextColor() {\n    return \"\";\n  }\n\n  get dataTextColor() {\n    return \"\";\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const el = this.container;\n    const halfSize = compNode.SIZE / 2;\n    var prevLeft = this.props.prevX - halfSize;\n    var prevTop = this.props.prevY - halfSize;\n    var left = this.props.x - halfSize;\n    var top = this.props.y - halfSize;\n    TweenMax.fromTo(el, 0.3, { x: prevLeft, y: prevTop }, { x: left, y: top });\n  }\n\n  componentDidMount() {\n    const el = this.container;\n    const halfSize = compNode.SIZE / 2;\n    var left = this.props.x - halfSize;\n    var top = this.props.y - halfSize;\n    TweenMax.fromTo(\n      el,\n      0.3,\n      { x: left, y: top, width: 0, height: 0 },\n      { x: left, y: top, width: compNode.SIZE, height: compNode.SIZE }\n    );\n  }\n\n  render() {\n    var styles = {\n      position: \"absolute\",\n      // left: left + 'px',\n      // top: top + 'px',\n      width: compNode.SIZE,\n      height: compNode.SIZE,\n      backgroundColor: this.props.color,\n      zIndex: 99,\n    };\n\n    if (this.props.look) {\n      styles.border = \"10px solid green\";\n    } else if (this.props.compare) {\n      styles.border = \"10px solid blue\";\n    } else if (this.props.error) {\n      styles.border = \"10px solid coral\";\n    }\n\n    return (\n      <div\n        className=\"compNode\"\n        ref={(c) => (this.container = c)}\n        style={styles}\n      >\n        <div className=\"nodeDataContainer\">\n          <div className=\"nodeData\">{this.props.data}</div>\n          <div className=\"nodeCount\">count: {this.props.count}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\ncompNode.propTypes = {\n  id: PropTypes.string,\n  level: PropTypes.number,\n  index: PropTypes.number,\n  treeDepth: PropTypes.number,\n  x: PropTypes.number,\n  y: PropTypes.number,\n  prevX: PropTypes.number,\n  prevY: PropTypes.number,\n  look: PropTypes.bool,\n  error: PropTypes.bool,\n  compare: PropTypes.bool,\n};\n\nexport default compNode;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["compNode","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","color","RED","_createClass","key","get","value","prevProps","prevState","el","this","container","halfSize","SIZE","prevLeft","prevX","prevTop","prevY","left","x","top","y","TweenMax","fromTo","width","height","_this2","styles","position","backgroundColor","zIndex","look","border","compare","error","_jsx","className","ref","c","style","children","_jsxs","data","count","Component"],"sourceRoot":""}